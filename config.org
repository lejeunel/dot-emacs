#+TITLE: My Emacs Config
#+AUTHOR: Laurent Lejeune
#+PROPERTY: header-args:emacs-lisp :tangle yes :results silent

* Introduction

This is my emacs configuration. It is still at a very early stage.

* Preliminaries

** Tangling Script
Instead of bootstrapping the tangling process through ~init.el~,
I prefer to resort to an "external" script. This is more manual
but let's me control more precisely when I want to sync my config.

#+begin_src sh
#!/usr/bin/env bash
emacs --batch \
    -l org \
    --eval "(setq org-src-preserve-indentation t)" \
    "$1" \
    -f org-babel-tangle
#+end_src

** First Installation
Upon clean start, we typically want to purge the package manager cache, and install
icons. We do this with a script of this form:

#+begin_src sh
EMACSDIR=$HOME/.config/emacs
echo ">>> Deleting packages, grammars and native compilation cache ..."
rm -rf $EMACSDIR/eln-cache $EMACSDIR/elpa $EMACSDIR/tree-sitter $EMACSDIR/elpaca $EMACSDIR/auto-save-list $EMACSDIR/transient
echo ">>> Starting Emacs and auto-package fetching/installing ..."
${pkgs.emacs-pgtk}/bin/emacs --init-dir="$EMACSDIR" -nw --eval="(ll/first-install)"
#+end_src

* Custom Variables

#+begin_src emacs-lisp
(defcustom ll/use-nerd-fonts t
  "Configuration for using Nerd Fonts Symbols."
  :type 'boolean
  :group 'appearance)
#+end_src

* Elpaca
#+begin_src emacs-lisp
(setq elpaca-lock-file (expand-file-name "elpaca-lock.el" user-emacs-directory))
#+end_src

Install Elpaca, our package manager.

#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
;; Install `use-package` via Elpaca (for convenience)
(elpaca elpaca-use-package
  (elpaca-use-package-mode))
#+end_src

* Basic UI tweaks
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq visible-bell nil)
#+end_src

* Project Management
#+begin_src emacs-lisp
  (use-package consult-project-extra
    :ensure t
    :config
    (with-eval-after-load 'evil
      (define-key evil-normal-state-map (kbd "<leader> p p") 'consult-project-extra-find)))
#+end_src

* Persistence and Workspaces
#+begin_src emacs-lisp
  (use-package perspective
    :ensure (perspective :host github :repo "nex3/perspective-el")
    :demand t
    :config
    (setq persp-suppress-no-prefix-key-warning t)
    (persp-mode)
    (with-eval-after-load 'evil
      (define-prefix-command 'll/workspace-map)
      (define-key evil-normal-state-map (kbd ",") 'll/workspace-map)

      (define-key ll/workspace-map (kbd ",") #'project-switch-project) 
      (define-key ll/workspace-map (kbd "n") #'persp-next)
      (define-key ll/workspace-map (kbd "p") #'persp-prev)
      (define-key ll/workspace-map (kbd "r") #'persp-rename)
      (define-key ll/workspace-map (kbd "k") #'persp-kill)
      (define-key ll/workspace-map (kbd "b") #'persp-switch-to-buffer*)
      (define-key ll/workspace-map (kbd "a") #'persp-add-buffer)
      (define-key ll/workspace-map (kbd "A") #'persp-set-buffer)))
#+end_src

* Harpoon
This package offers quick bookmarks separated by project and branch.
You can quick navigate between your working files and forget about that files
opened that you will not use anymore.

#+begin_src emacs-lisp
  (use-package harpoon
    :ensure (harpoon :host github :repo "otavioschwanck/harpoon.el")
    :config 
    (setq harpoon-project-package 'project)
    (with-eval-after-load 'evil
      (define-key evil-normal-state-map (kbd "<leader> r m") 'harpoon-quick-menu-hydra)
      (define-key evil-normal-state-map (kbd "<leader> r a") 'harpoon-add-file)
      (define-key evil-normal-state-map (kbd "<leader> r r") 'harpoon-toggle-file)
      (define-key evil-normal-state-map (kbd "<leader> r t") 'harpoon-toggle-quick-menu)
      (define-key evil-normal-state-map (kbd "<leader> r c") 'harpoon-clear)
      (define-key evil-normal-state-map (kbd "<leader> 1") 'harpoon-go-to-1)
      (define-key evil-normal-state-map (kbd "<leader> 2") 'harpoon-go-to-2)
      (define-key evil-normal-state-map (kbd "<leader> 3") 'harpoon-go-to-3)
      (define-key evil-normal-state-map (kbd "<leader> 4") 'harpoon-go-to-4)
      (define-key evil-normal-state-map (kbd "<leader> 5") 'harpoon-go-to-5)
      (define-key evil-normal-state-map (kbd "<leader> 6") 'harpoon-go-to-6)
      (define-key evil-normal-state-map (kbd "<leader> 7") 'harpoon-go-to-7)
      (define-key evil-normal-state-map (kbd "<leader> 8") 'harpoon-go-to-8)
      (define-key evil-normal-state-map (kbd "<leader> 9") 'harpoon-go-to-9)))
#+end_src
* Recentf
Log and retrieve most recent files
#+begin_src emacs-lisp
(use-package recentf
  :init
  (recentf-mode 1)
  (setq recentf-max-menu-items 50))  ;; adjust the number of recent files
#+end_src
* Embark
Embark provides a powerful contextual action menu for Emacs, allowing
you to perform various operations on completion candidates and other items.
It extends the capabilities of completion frameworks by offering direct
actions on the candidates.
Just `<leader> .' over any text, explore it :)
#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :defer t)
#+end_src

* Embark-Consult

Embark-Consult provides a bridge between Embark and Consult, ensuring
that Consult commands, like previews, are available when using Embark.
#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)) ;; Enable preview in Embark collect mode.
#+end_src

* Package management
#+begin_src emacs-lisp
  ;; Example packages managed by Elpaca
  (use-package transient
    :ensure t)

  (use-package magit
    :ensure t
    :defer t)

  (use-package vertico
    :ensure t
    :init (vertico-mode))


  (use-package orderless
    :ensure t
    :after vertico
    :custom (completion-styles '(orderless basic)))

  (use-package marginalia
    :ensure t
    :init (marginalia-mode))
#+end_src

* Exploring Filesystem

** Vertico extension
This package is a Vertico extension, which provides Ido-like
directory navigation commands.  The commands can be bound in the
~vertico-map~.
#+begin_src emacs-lisp
(use-package vertico-directory
    :after vertico
    :ensure nil
    ;; More convenient directory navigation commands
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

** Dired Keybindings
Use ~h~ to go up directory and ~l~ to open file (like netrw).

#+begin_src emacs-lisp
(with-eval-after-load 'dired
  (evil-define-key 'normal dired-mode-map
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file
    (kbd "r") 'revert-buffer))  ;; refresh buffer
#+end_src

* Magit
Make Magit commit buffer start in insert mode
#+begin_src emacs-lisp
(add-hook 'git-commit-mode-hook #'evil-insert-state)
#+end_src

* Consult
Consult provides powerful completion and narrowing commands for Emacs.
It integrates well with other completion frameworks like Vertico, enabling
features like previews and enhanced register management. It's useful for
navigating buffers, files, and xrefs with ease.

#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :defer t
  :init
  ;; Enhance register preview with thin lines and no mode line.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult for xref locations with a preview feature.
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref))

#+end_src

#+begin_src emacs-lisp
(defun ll/consult-project-or-all-buffers ()
  "Use `consult-project-buffer' if in a project, else `consult-buffer'."
  (interactive)
  (if (project-current)
      (consult-project-buffer)
    (consult-buffer)))
#+end_src

* Treesitter
Treesit-auto simplifies the use of Tree-sitter grammars in Emacs,
providing automatic installation and mode association for various
programming languages. This enhances syntax highlighting and
code parsing capabilities, making it easier to work with modern
programming languages.

#+begin_src emacs-lisp
(use-package treesit-auto
  :ensure t
  :after emacs
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode t))
#+end_src

* Org Mode setup
#+begin_src emacs-lisp
(use-package org
  :ensure nil
  :config
  (setq org-startup-indented t
        org-hide-emphasis-markers t))
#+end_src

* Appearance
** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetBrainsMono Nerd Font 16")
#+end_src

** Theme 
#+begin_src emacs-lisp
  (use-package modus-themes
      :ensure t
      :init
      (load-theme 'modus-vivendi-tinted t))

#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
      :ensure t
      :defer t
      :custom
      (doom-modeline-buffer-file-name-style 'buffer-name)  ;; Set the buffer file name style to just the buffer name (without path).
      (doom-modeline-project-detection 'project)           ;; Enable project detection for displaying the project name.
      (doom-modeline-buffer-name t)                        ;; Show the buffer name in the mode line.
      (doom-modeline-vcs-max-length 25)                    ;; Limit the version control system (VCS) branch name length to 25 characters.
      :config
      (if ll/use-nerd-fonts                                ;; Check if nerd fonts are being used.
          (setq doom-modeline-icon t)                      ;; Enable icons in the mode line if nerd fonts are used.
          (setq doom-modeline-icon nil))                     ;; Disable icons if nerd fonts are not being used.
      :init
      (doom-modeline-mode 1))
#+end_src

** Nerd Icons
The `nerd-icons' package provides a set of icons for use in Emacs. These icons can
enhance the visual appearance of various modes and packages, making it easier to
distinguish between different file types and functionalities.

#+begin_src emacs-lisp
(use-package nerd-icons
:if ll/use-nerd-fonts
:ensure t
:defer t)
#+end_src

** Nerd Icons Dired
The `nerd-icons-dired' package integrates nerd icons into the Dired mode,
providing visual icons for files and directories. This enhances the Dired
interface by making it easier to identify file types at a glance.

#+begin_src emacs-lisp
(use-package nerd-icons-dired
:if ll/use-nerd-fonts                   ;; Load the package only if the user has configured to use nerd fonts.
:ensure t                               ;; Ensure the package is installed.
:defer t                                ;; Load the package only when needed to improve startup time.
:hook
(dired-mode . nerd-icons-dired-mode))
#+end_src

** Nerd Icons Completion
The `nerd-icons-completion' package enhances the completion interfaces in
Emacs by integrating nerd icons with completion frameworks such as
`marginalia'. This provides visual cues for the completion candidates,
making it easier to distinguish between different types of items.

#+begin_src emacs-lisp
(use-package nerd-icons-completion
:if ll/use-nerd-fonts                   ;; Load the package only if the user has configured to use nerd fonts.
:ensure t                               ;; Ensure the package is installed.
:after (:all nerd-icons marginalia)     ;; Load after `nerd-icons' and `marginalia' to ensure proper integration.
:config
(nerd-icons-completion-mode)            ;; Activate nerd icons for completion interfaces.
(add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)) ;; Setup icons in the marginalia mode for enhanced completion display.
#+end_src
* Auto-completion
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :hook ((after-init . global-company-mode)
  	 (lsp-mode . company-mode))
    :config
    ;; optional tweaks
    (setq company-idle-delay 0.2        ;; how quickly completions pop up
          company-minimum-prefix-length 1
          company-selection-wrap-around t))
#+end_src

* Editing enhancements

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))

(use-package helpful
  :ensure t
  :bind
  ([remap describe-function] . helpful-callable)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Undo-tree
The `undo-tree' package provides an advanced and visual way to
manage undo history. It allows you to navigate and visualize your
undo history as a tree structure, making it easier to manage
changes in your buffers.

#+begin_src emacs-lisp
  (use-package undo-tree
    :defer t
    :ensure t
    :init
    (setq undo-tree-visualizer-timestamps t
          undo-tree-visualizer-diff t
          ;; Increase undo limits to avoid losing history due to Emacs' garbage collection.
          ;; These values can be adjusted based on your needs.
          ;; 10X bump of the undo limits to avoid issues with premature
          ;; Emacs GC which truncates the undo history very aggressively.
          undo-limit 800000                     ;; Limit for undo entries.
          undo-strong-limit 12000000            ;; Strong limit for undo entries.
          undo-outer-limit 120000000)           ;; Outer limit for undo entries.
    (global-undo-tree-mode)
    :config
    ;; Set the directory where `undo-tree' will save its history files.
    ;; This keeps undo history across sessions, stored in a cache directory.
    (setq undo-tree-history-directory-alist '(("." . "~/config/emacs/.cache/undo"))))
#+end_src

* Evil

#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)      ;; Integrate `evil' with other Emacs features (optional as it's true by default).
    (setq evil-want-keybinding nil)     ;; Disable default keybinding to set custom ones.
    (setq evil-want-C-u-scroll t)       ;; Makes C-u scroll
    (setq evil-want-C-u-delete t)       ;; Makes C-u delete on insert mode
    :config
    (evil-set-undo-system 'undo-tree)   ;; Uses the undo-tree package as the default undo system

    ;; Set the leader key to space for easier access to custom commands. (setq evil-want-leader t)
    (setq evil-leader/in-all-states t)  ;; Make the leader key available in all states.
    (setq evil-want-fine-undo t)        ;; Evil uses finer grain undoing steps

    ;; Define the leader key as Space
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-set-leader 'visual (kbd "SPC"))

    ;; Keybindings for searching and finding files.
    (evil-define-key 'normal 'global (kbd "<leader> s f") 'consult-find)
    (evil-define-key 'normal 'global (kbd "<leader> s g") 'consult-grep)
    (evil-define-key 'normal 'global (kbd "<leader> s G") 'consult-git-grep)
    (evil-define-key 'normal 'global (kbd "<leader> s r") 'consult-ripgrep)
    (evil-define-key 'normal 'global (kbd "<leader> s h") 'consult-info)
    (evil-define-key 'normal 'global (kbd "<leader> /") 'consult-line)

    ;; Flymake navigation
    (evil-define-key 'normal 'global (kbd "<leader> x x") 'consult-flymake);; Gives you something like `trouble.nvim'
    (evil-define-key 'normal 'global (kbd "] d") 'flymake-goto-next-error) ;; Go to next Flymake error
    (evil-define-key 'normal 'global (kbd "[ d") 'flymake-goto-prev-error) ;; Go to previous Flymake error

    (evil-define-key 'normal 'global (kbd "<leader> f s") 'save-buffer)

    ;; Dired commands and exploration
    (evil-define-key 'normal 'global (kbd "<leader> f f") 'find-file)
    (evil-define-key 'normal 'global (kbd "<leader> f r") 'consult-recent-file)
    (evil-define-key 'normal 'global (kbd "<leader> f d") 'dired-jump)

    ;; Magit keybindings for Git integration
    (evil-define-key 'normal 'global (kbd "<leader> g g") 'magit-status)      ;; Open Magit status
    (evil-define-key 'normal 'global (kbd "<leader> g l") 'magit-log-current) ;; Show current log
    (evil-define-key 'normal 'global (kbd "<leader> g d") 'magit-diff-buffer-file) ;; Show diff for the current file
    (evil-define-key 'normal 'global (kbd "<leader> g D") 'diff-hl-show-hunk) ;; Show diff for a hunk
    (evil-define-key 'normal 'global (kbd "<leader> g b") 'vc-annotate)       ;; Annotate buffer with version control info

    ;; Buffer management keybindings
    (evil-define-key 'normal 'global (kbd "<leader> k") 'switch-to-next-buffer)
    (evil-define-key 'normal 'global (kbd "<leader> j") 'switch-to-prev-buffer)
    (evil-define-key 'normal 'global (kbd "<leader> x") 'kill-current-buffer) 
    (evil-define-key 'normal 'global (kbd "<leader> <") 'll/consult-project-or-all-buffers)

    ;; Project management keybindings
    (evil-define-key 'normal 'global (kbd "<leader> p b") 'consult-project-buffer) ;; Consult project buffer
    (evil-define-key 'normal 'global (kbd "<leader> p f") 'project-find-file) ;; Find file in project
    (evil-define-key 'normal 'global (kbd "<leader> p g") 'project-find-regexp) ;; Find regexp in project
    (evil-define-key 'normal 'global (kbd "<leader> p k") 'project-kill-buffers) ;; Kill project buffers
    (evil-define-key 'normal 'global (kbd "<leader> p D") 'project-dired) ;; Dired for project

    ;; Yank from kill ring
    (evil-define-key 'normal 'global (kbd "P") 'consult-yank-from-kill-ring)
    (evil-define-key 'normal 'global (kbd "<leader> P") 'consult-yank-from-kill-ring)

    ;; Embark actions for contextual commands
    (evil-define-key 'normal 'global (kbd "<leader> .") 'embark-act)

    ;; Undo tree visualization
    (evil-define-key 'normal 'global (kbd "<leader> u") 'undo-tree-visualize)

    ;; Help keybindings
    (evil-define-key 'normal 'global (kbd "<leader> h m") 'describe-mode) ;; Describe current mode
    (evil-define-key 'normal 'global (kbd "<leader> h f") 'describe-function) ;; Describe function
    (evil-define-key 'normal 'global (kbd "<leader> h v") 'describe-variable) ;; Describe variable
    (evil-define-key 'normal 'global (kbd "<leader> h k") 'describe-key)

    ;; Window keybindings
    (evil-define-key 'normal 'global (kbd "<leader> w d") 'delete-window) 
    (evil-define-key 'normal 'global (kbd "<leader> TAB") 'other-window) 

    ;; Tab navigation
    (evil-define-key 'normal 'global (kbd "] t") 'tab-next) ;; Go to next tab
    (evil-define-key 'normal 'global (kbd "[ t") 'tab-previous) ;; Go to previous tab

    ;; LSP commands keybindings
    (evil-define-key 'normal lsp-mode-map
                     ;; (kbd "gd") 'lsp-find-definition                ;; evil-collection already provides gd
                     (kbd "gr") 'lsp-find-references                   ;; Finds LSP references
                     (kbd "<leader> c a") 'lsp-execute-code-action     ;; Execute code actions
                     (kbd "<leader> r n") 'lsp-rename                  ;; Rename symbol
                     (kbd "gI") 'lsp-find-implementation               ;; Find implementation
                     (kbd "<leader> l f") 'lsp-format-buffer)          ;; Format buffer via lsp


    (defun ek/lsp-describe-and-jump ()
      "Show hover documentation and jump to *lsp-help* buffer."
      (interactive)
      (lsp-describe-thing-at-point)
      (let ((help-buffer "*lsp-help*"))
        (when (get-buffer help-buffer)
          (switch-to-buffer-other-window help-buffer))))

    ;; Emacs 31 finaly brings us support for 'floating windows' (a.k.a. "child frames")
    ;; to terminal Emacs. If you're still using 30, docs will be shown in a buffer at the
    ;; inferior part of your frame.
    (evil-define-key 'normal 'global (kbd "K")
      (if (>= emacs-major-version 31)
          #'eldoc-box-help-at-point
          #'ek/lsp-describe-and-jump))

    ;; Commenting functionality for single and multiple lines
    (evil-define-key 'normal 'global (kbd "gcc")
                     (lambda ()
                       (interactive)
                       (if (not (use-region-p))
                           (comment-or-uncomment-region (line-beginning-position) (line-end-position)))))

    (evil-define-key 'visual 'global (kbd "gc")
                     (lambda ()
                       (interactive)
                       (if (use-region-p)
                           (comment-or-uncomment-region (region-beginning) (region-end)))))


    (evil-mode 1))
#+end_src

** Evil Snipe

#+begin_src emacs-lisp
  (use-package evil-snipe
    :ensure (evil-snipe :host github :repo "hlissner/evil-snipe")
    :init
    (evil-snipe-mode +1)
    (evil-snipe-override-mode 1))
#+end_src

** Evil collection
The `evil-collection' package enhances the integration of
`evil-mode' with various built-in and third-party packages. It
provides a better modal experience by remapping keybindings and
commands to fit the `evil' style.
#+begin_src emacs-lisp
  (use-package evil-collection
  :defer t
  :ensure t
  :init
  (evil-collection-init)
  :custom
  (evil-collection-want-find-usages-bindings t)
  :config
  (setq evil-collection-setup-minibuffer t))
#+end_src

** Search from visual selection

#+begin_src emacs-lisp
  (use-package evil-visualstar
    :ensure (evil-visualstar :host github :repo "bling/evil-visualstar")
    :init (global-evil-visualstar-mode))

  (defun ll/evil-ex-search-show-count-advice (&rest _)
    "Show current match count in the modeline for visual star search."
    (when (evil-visual-state-p)
      ;; force update of search count
      (evil-ex-search-update)))

  (advice-add 'evil-visualstar/begin-search-forward :after #'ll/evil-ex-search-show-count-advice)
  (advice-add 'evil-visualstar/begin-search-backward :after #'ll/evil-ex-search-show-count-advice)
#+end_src

* LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure (lsp-mode :host github :repo "emacs-lsp/lsp-mode")
    :hook (python-ts-mode . lsp-deferred)
    :commands (lsp lsp-deferred)
    :config
    (setq lsp-prefer-capf t)  ;; Use completion-at-point-functions (CAPF) as backend 
    )

  (use-package lsp-ui
    :ensure (lsp-ui :host github :repo "emacs-lsp/lsp-ui")
    :commands lsp-ui-mode)
#+end_src

* Python

** LSP
#+begin_src emacs-lisp
  (use-package lsp-pyright
      :ensure (lsp-pyright :host github :repo "emacs-lsp/lsp-pyright")
    :custom (lsp-pyright-langserver-command "basedpyright")
    )
#+end_src
** Breakpoints

Bindings and functions to add and highlight breakpoints.
#+begin_src emacs-lisp :tangle yes
(defvar python--pdb-breakpoint-string "breakpoint()")
(defun ll/python-add-breakpoint ()
"Inserts a python breakpoint using `pdb'"
    (interactive)
    (back-to-indentation)
    ;; this preserves the correct indentation in case the line above
    ;; point is a nested block
    (split-line)
    (insert python--pdb-breakpoint-string)
    (python-set-debug-highlight))

(defun python-set-debug-highlight ()
    (interactive)
    (highlight-lines-matching-regexp "breakpoint[.]?" 'hi-red-b))
#+end_src

#+begin_src emacs-lisp
(add-hook 'python-ts-mode-hook
          (lambda ()
            (define-key python-ts-mode-map (kbd "<leader> m d") 'll/python-add-breakpoint)))
#+end_src

* Direnv
Direnv works by invoking direnv to obtain the environment for the current file, then updating the emacs
variables process-environment and exec-path.

The result is that programs started from within emacs, such as inferior shells, linters,
compilers, and test runners, will be looked up in the correct $PATH, and will be started with the correct environment variables set.

#+begin_src emacs-lisp
  (use-package direnv
      :ensure (direnv :host github :repo "wbolster/emacs-direnv")
      :config
      (direnv-mode))
#+end_src
* Org-mode
#+begin_src emacs-lisp
  (use-package org
    :ensure nil  ;; Don't install org from ELPA, use the built-in one
    :config
    (define-key org-mode-map (kbd "<leader> m e") #'org-export-dispatch))
#+end_src
